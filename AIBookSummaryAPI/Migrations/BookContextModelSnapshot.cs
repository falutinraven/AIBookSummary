// <auto-generated />
using AIBookSummaryAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AIBookSummaryAPI.Migrations
{
    [DbContext(typeof(BookContext))]
    partial class BookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AIBookSummary.Models.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("AIBookSummary.Models.ChapterAnalysis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ChapterIndex")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "chapterIndex");

                    b.Property<string>("ChapterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "chapterName");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "summary");

                    b.PrimitiveCollection<string>("Themes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "themes");

                    b.HasKey("Id");

                    b.ToTable("ChapterAnalysis");
                });

            modelBuilder.Entity("AIBookSummary.Models.ChapterInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AnalysisId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BookId")
                        .HasColumnType("bigint");

                    b.Property<string>("Contents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId");

                    b.HasIndex("BookId");

                    b.ToTable("ChapterInfo");
                });

            modelBuilder.Entity("AIBookSummary.Models.CharacterInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ChapterAnalysisId")
                        .HasColumnType("bigint");

                    b.PrimitiveCollection<string>("ChaptersIntroduced")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "chaptersIntroduced");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.HasIndex("ChapterAnalysisId");

                    b.ToTable("CharacterInfo");

                    b.HasAnnotation("Relational:JsonPropertyName", "characters");
                });

            modelBuilder.Entity("AIBookSummary.Models.CharacterProgression", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Change")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "change");

                    b.Property<int>("Chapter")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "chapter");

                    b.Property<long?>("CharacterInfoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CharacterInfoId");

                    b.ToTable("CharacterProgression");

                    b.HasAnnotation("Relational:JsonPropertyName", "progression");
                });

            modelBuilder.Entity("AIBookSummary.Models.NamedLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ChapterAnalysisId")
                        .HasColumnType("bigint");

                    b.PrimitiveCollection<string>("ChaptersIntroduced")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "chaptersIntroduced");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.HasIndex("ChapterAnalysisId");

                    b.ToTable("NamedLocation");

                    b.HasAnnotation("Relational:JsonPropertyName", "namedlocations");
                });

            modelBuilder.Entity("AIBookSummary.Models.WorldVocabItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BestGuessAtMeaning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "best_guess_at_meaning");

                    b.Property<long?>("ChapterAnalysisId")
                        .HasColumnType("bigint");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "word");

                    b.HasKey("Id");

                    b.HasIndex("ChapterAnalysisId");

                    b.ToTable("WorldVocabItem");

                    b.HasAnnotation("Relational:JsonPropertyName", "worldVocab");
                });

            modelBuilder.Entity("AIBookSummary.Models.ChapterInfo", b =>
                {
                    b.HasOne("AIBookSummary.Models.ChapterAnalysis", "Analysis")
                        .WithMany()
                        .HasForeignKey("AnalysisId");

                    b.HasOne("AIBookSummary.Models.Book", null)
                        .WithMany("Chapters")
                        .HasForeignKey("BookId");

                    b.Navigation("Analysis");
                });

            modelBuilder.Entity("AIBookSummary.Models.CharacterInfo", b =>
                {
                    b.HasOne("AIBookSummary.Models.ChapterAnalysis", null)
                        .WithMany("Characters")
                        .HasForeignKey("ChapterAnalysisId");
                });

            modelBuilder.Entity("AIBookSummary.Models.CharacterProgression", b =>
                {
                    b.HasOne("AIBookSummary.Models.CharacterInfo", null)
                        .WithMany("Progression")
                        .HasForeignKey("CharacterInfoId");
                });

            modelBuilder.Entity("AIBookSummary.Models.NamedLocation", b =>
                {
                    b.HasOne("AIBookSummary.Models.ChapterAnalysis", null)
                        .WithMany("NamedLocations")
                        .HasForeignKey("ChapterAnalysisId");
                });

            modelBuilder.Entity("AIBookSummary.Models.WorldVocabItem", b =>
                {
                    b.HasOne("AIBookSummary.Models.ChapterAnalysis", null)
                        .WithMany("WorldVocab")
                        .HasForeignKey("ChapterAnalysisId");
                });

            modelBuilder.Entity("AIBookSummary.Models.Book", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("AIBookSummary.Models.ChapterAnalysis", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("NamedLocations");

                    b.Navigation("WorldVocab");
                });

            modelBuilder.Entity("AIBookSummary.Models.CharacterInfo", b =>
                {
                    b.Navigation("Progression");
                });
#pragma warning restore 612, 618
        }
    }
}
